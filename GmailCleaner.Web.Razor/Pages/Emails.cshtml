@page
@using GmailCleaner.Models
@using GmailCleaner.Models.Data
@using GmailCleaner.Models.ExternalModels
@using GmailCleaner.Pages
@using System.Text.Json.Nodes
@using System.Web
@model EmailsModel
@{
}
@if (Model.EmailErrors.Count > 0)
{
    <div class="card alert-danger">
        @foreach (Error error in Model.EmailErrors.Errors)
        {
            if (error.StatusCode is not null)
            {
                <span>Status Code: @error.StatusCode</span>
            }
            <span>Error Message: @error.Message</span>
        }
    </div>
}
<form method="post" class="row g-3">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="mb-3 text-center form-group">
        <label asp-for="NumberEmails"class="form-label">Number of Emails</label>
        <input class="form-control text-center" id="formGroupNumber" asp-for="NumberEmails">
    </div>
    <div class="col-12 mb-3 text-center">
        <button type="submit" class="btn btn-primary">Check My Inbox!</button>
    </div>
</form>
@if (Model.Emails.Count > 0)
{
    <div class="alert alert-success" role="alert">
        We found @Model.Emails.Where(e => !string.IsNullOrEmpty(e.ListUnsubscribe)).Count()  potential junk emails!
    </div>
    <div class="accordion" id="emailAccordion">
        @foreach (Email email in Model.Emails)
        {
            if (!string.IsNullOrEmpty(email.ListUnsubscribe))
            {
                <div class="row">
                    <div class="accordion-item col-11">
                        <h2 class="accordion-header" id="heading_@email.Id">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@email.Id" aria-expanded="true" aria-controls="collapse_@email.Id">
                                <span>@email.FromEmail</span>
                            </button>
                        </h2>
                        <div id="collapse_@email.Id" class="accordion-collapse collapse show" aria-labelledby="heading_@email.Id" data-bs-parent="#emailAccordion">
                            <div class="accordion-body">
                                <div>
                                    <span>Subject: </span>
                                    <span>
                                        @email.Subject
                                    </span>
                                </div>
                                <div>
                                    <span>Snippet: </span>
                                    <span>
                                        @email.Snippet
                                    </span>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="col-1">
                        <a class="btn btn-outline-success float-end end-100 justify-content-end text-end" href="@email.UnsubscribeLink" target="_blank">
                            Unsubscribe
                        </a>
                    </div>
                </div>
                
            }
        }
    </div>
}
@* <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Accordion Item #1
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    Accordion Item #2
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    Accordion Item #3
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                </div>
            </div>
        </div>
    </div> *@



